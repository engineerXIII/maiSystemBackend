version: "3.8"

services:
  nginx:
    container_name: nginx
    restart: always
    image: nginx:1.22
    ports:
      - "8888:8888"
    depends_on:
      - product
    links:
      - product
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    networks:
      - web_api
  product:
    container_name: api_product
    build:
      context: ./../
      dockerfile: Dockerfile.Product
    ports:
      - "5050:5050"
    environment:
      - SERVER_PORT=:5050
      - JAEGER_HOST=jaeger:6831
      - JAEGER_SERVICENAME=product_api
      - POSTGRES_HOST=postgesql
      - REDIS_REDISADDR=keydb:6379
      - METRICS_SERVICENAME=product_api
    links:
      - postgesql
      - keydb
      - jaeger
    cap_add:
      - SYS_PTRACE
    depends_on:
      - postgesql
      - keydb
    restart: always
    volumes:
      - ./../:/app
    networks:
      - web_api
  order:
    container_name: api_order
    build:
      context: ./../
      dockerfile: Dockerfile.Order
    ports:
      - "5055:5055"
    environment:
      - SERVER_PORT=:5055
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=test
      - RABBITMQ_PASSWORD=test
      - RABBITMQ_QUEUE=notify
      - JAEGER_HOST=jaeger:6831
      - JAEGER_SERVICENAME=order_api
      - REDIS_REDISADDR=keydb:6379
      - METRICS_SERVICENAME=order_api
    links:
      - rabbitmq
      - keydb
      - jaeger
    cap_add:
      - SYS_PTRACE
    depends_on:
      - rabbitmq
      - keydb
    restart: always
    volumes:
      - ./../:/app
    networks:
      - web_api

  jaeger:
    container_name: jaeger_container
    restart: always
    image: jaegertracing/all-in-one:1.49
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14250:14250
      - 9411:9411
    networks:
      - web_api

  postgesql:
    image: postgres:12-alpine
    container_name: api_postgesql
    ports:
      - "5432:5432"
    restart: on-failure
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth_db
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    networks:
      - web_api

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    restart: on-failure
    environment:
      RABBITMQ_DEFAULT_USER: test
      RABBITMQ_DEFAULT_PASS: test
    networks:
      - web_api

  prometheus:
    container_name: prometheus_container
    image: prom/prometheus
    restart: on-failure
    volumes:
      - ./monitoring/prometheus-local.yml:/etc/prometheus/prometheus.yml:Z
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=20d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - '9090:9090'
    networks:
      - web_api

  keydb:
    image: eqalpha/keydb:alpine_x86_64_v6.3.2
    container_name: api_keydb
    ports:
      - "6379:6379"
    restart: always
    networks:
      - web_api

  node_exporter:
    container_name: node_exporter_container
    restart: on-failure
    image: prom/node-exporter
    ports:
      - '9101:9100'
    networks:
      - web_api

  grafana:
    container_name: grafana_container
    restart: on-failure
    image: grafana/grafana
    ports:
      - '3000:3000'
    networks:
      - web_api

networks:
  web_api:
    driver: bridge